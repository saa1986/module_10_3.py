"""Задача "Банковские операции":
Необходимо создать класс Bank со следующими свойствами:

Атрибуты объекта:
balance - баланс банка (int)
lock - объект класса Lock для блокировки потоков.

Методы объекта:
Метод deposit:
Будет совершать 100 транзакций пополнения средств.
Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.
Метод take:
Будет совершать 100 транзакций снятия.
Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
В начале должно выводится сообщение "Запрос на <случайное число>".
Далее производится проверка: если случайное число меньше или равно текущему балансу, то произвести снятие, уменьшив balance на соответствующее число и вывести на экран "Снятие: <случайное число>. Баланс: <текущий баланс>".
Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён, недостаточно средств" и заблокировать поток методом acquire.
Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.
После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".

По итогу вы получите скрипт разблокирующий поток до баланса равному 500 и больше или блокирующий, когда происходит попытка снятия при недостаточном балансе."""
import threading  # Импортируем модуль threading для работы с потоками
import random  # Импортируем модуль random для генерации случайных чисел
import time  # Импортируем модуль time для использования функции sleep

class Bank:  # Определяем класс Bank
    def __init__(self):  # Конструктор класса
        self.balance = 0  # Инициализируем баланс банка равным 0
        self.lock = threading.Lock()  # Создаем объект Lock для блокировки потоков

    def deposit(self):  # Метод для пополнения средств
        for _ in range(100):  # Цикл для 100 транзакций пополнения
            amount = random.randint(50, 500)  # Генерируем случайную сумму для пополнения
            self.lock.acquire()  # Блокируем поток
            self.balance += amount  # Увеличиваем баланс на сумму пополнения
            print(f"Пополнение: {amount}. Баланс: {self.balance}")  # Выводим информацию о пополнении
            if self.balance >= 500 and self.lock.locked():  # Проверяем, если баланс >= 500
                self.lock.release()  # Разблокируем поток
            time.sleep(0.001)  # Задержка для имитации скорости выполнения пополнения

    def take(self):  # Метод для снятия средств
        for _ in range(100):  # Цикл для 100 транзакций снятия
            amount = random.randint(50, 500)  # Генерируем случайную сумму для снятия
            print(f"Запрос на {amount}")  # Выводим сообщение о запросе на снятие
            if amount <= self.balance:  # Проверяем, достаточно ли средств для снятия
                self.balance -= amount  # Уменьшаем баланс на сумму снятия
                print(f"Снятие: {amount}. Баланс: {self.balance}")  # Выводим информацию о снятии
            else:  # Если средств недостаточно
                print("Запрос отклонён, недостаточно средств")  # Сообщаем о недостатке средств
                self.lock.acquire()  # Блокируем поток
            time.sleep(0.001)  # Задержка для имитации скорости выполнения снятия

# Создаем объект класса Bank
bk = Bank()

# Создаем потоки для методов deposit и take
th1 = threading.Thread(target=Bank.deposit, args=(bk,))  # Поток для пополнения
th2 = threading.Thread(target=Bank.take, args=(bk,))  # Поток для снятия

# Запускаем потоки
th1.start()  # Запускаем поток пополнения
th2.start()  # Запускаем поток снятия

# Ожидаем завершения обоих потоков
th1.join()  # Ожидаем завершения потока пополнения
th2.join()  # Ожидаем завершения потока снятия

# Выводим итоговый баланс после завершения работы потоков
print(f'Итоговый баланс: {bk.balance}')  # Выводим итоговый баланс банка